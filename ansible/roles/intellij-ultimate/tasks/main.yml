---
# get the latest published version and build of IntelliJ Ultimate
- name: "get release json"
  get_url:
    url: "https://data.services.jetbrains.com/products/releases?code=IIU&latest=true&type=release"
    dest: "/tmp/idea.json"

- name: "get latest build"
  shell: cat /tmp/idea.json | grep -oP "(?<=\"build\".\").*?(?=\",)" | head -1
  register: idea_build

# get current installed
- name: "get installed IntelliJ Files"
  find:
    paths: "/usr/share"
    patterns: "idea-IU*"
    file_type: directory
    recurse: no
  register: idea_old

- name: "check if already installed"
  debug:
    msg: "{{ idea_old.files | length > 0 }}"
  register: is_installed

- name: "check if installed build number not equal to latest published one"
  debug:
    msg: "{{ idea_old.files | sort(attribute='ctime') | map(attribute='path') | last | regex_replace('/usr/share/idea-IU-', '') != idea_build.stdout }}"
  register: need_update
  when: "is_installed.msg|bool"

# uninstall if already installed and build is not equal
- name: "uninstall old IntelliJ Ultimate"
  become: yes
  file:
    path: "/usr/share//usr/share/idea-IU-{{ idea_build.stdout }}"
    state: absent
  when: "is_installed.msg|bool and need_update.msg|bool"

# install if not already installed or build was not equal
- name: "install IntelliJ Ultimate"
  become: yes
  unarchive:
    src: "https://download-cdn.jetbrains.com/idea/ideaIU-{{ version }}.tar.gz"
    dest: "/usr/share/"
    remote_src: yes
  when: "not is_installed.msg|bool or need_update.msg|bool"

# add desktop entry
- name: "check if desktop entry already exists"
  stat:
    path: "/home/vagrant/Desktop/IntelliJ.desktop"
  register: desktop_entry

- name: "create desktop entry"
  template:
    src: "files/IntelliJ.desktop.template"
    dest: "/home/vagrant/Desktop/IntelliJ.desktop"
  when: not desktop_entry.stat.exists

# install plugins
- name: "install plugin"
  include: plugin.yml
  with_items:
    - { "plugin":["plugin_name":"EclipseFormatter", "plugin_number":"6546", "plugin_dir":"EclipseFormatter", "idea_build": "{{ idea_build.stdout }}"] }
    - { "plugin":["plugin_name":".ignore", "plugin_number":"7495", "plugin_dir":".ignore", "idea_build": "{{ idea_build.stdout }}"] }
    - { "plugin":["plugin_name":"idea-batch", "plugin_number":"265", "plugin_dir":"EclipseFormatter", "idea_build": "{{ idea_build.stdout }}"] }
    - { "plugin":["plugin_name":"EJB", "plugin_number":"16939", "plugin_dir":"EJB", "idea_build": "{{ idea_build.stdout }}"] }
    - { "plugin":["plugin_name":"JSF", "plugin_number":"18583", "plugin_dir":"JSF", "idea_build": "{{ idea_build.stdout }}"] }
    - { "plugin":["plugin_name":"PMDPlugin", "plugin_number":"1137", "plugin_dir":"PMDPlugin", "idea_build": "{{ idea_build.stdout }}"] }
    - { "plugin":["plugin_name":"save-actions", "plugin_number":"7642", "plugin_dir":"intellij-plugin-save-actions-2.3.0.jar", "idea_build": "{{ idea_build.stdout }}"] }

- name: "install plugins"
  include: plugins.yml
  with_items: "{{ plugins }}"

# set configuration
#Configuration (idea.config.path): ~/.config/JetBrains/IntelliJIdea2022.2 TODO

# config system
#System (idea.system.path): ~/.cache/JetBrains/IntelliJIdea2022.2 TODO
